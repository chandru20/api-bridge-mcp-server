openapi: 3.0.0
info:
  title: E-commerce Management API
  version: 1.0.0
  description: A comprehensive e-commerce API with orders, customers, inventory, and payment processing.
servers:
  - url: https://api.ecommerce.example.com/v1
    description: Production server
  - url: http://localhost:8080/v1
    description: Development server

paths:
  /customers:
    get:
      summary: List all customers
      operationId: list_customers
      tags: [Customers]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create a new customer
      operationId: create_customer
      tags: [Customers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{customerId}:
    get:
      summary: Get customer by ID
      operationId: get_customer
      tags: [Customers]
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      summary: Update customer
      operationId: update_customer
      tags: [Customers]
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /orders:
    get:
      summary: List all orders
      operationId: list_orders
      tags: [Orders]
      parameters:
        - name: customerId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create a new order
      operationId: create_order
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      summary: Get order by ID
      operationId: get_order
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    patch:
      summary: Update order status
      operationId: update_order_status
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
                trackingNumber:
                  type: string
                notes:
                  type: string
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /inventory:
    get:
      summary: List inventory items
      operationId: list_inventory
      tags: [Inventory]
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: lowStock
          in: query
          schema:
            type: boolean
        - name: inStock
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Inventory list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
    post:
      summary: Add inventory item
      operationId: create_inventory_item
      tags: [Inventory]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemCreate'
      responses:
        '201':
          description: Inventory item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'

  /inventory/{itemId}:
    get:
      summary: Get inventory item
      operationId: get_inventory_item
      tags: [Inventory]
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Inventory item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
    put:
      summary: Update inventory item
      operationId: update_inventory_item
      tags: [Inventory]
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemUpdate'
      responses:
        '200':
          description: Inventory item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
    delete:
      summary: Remove inventory item
      operationId: delete_inventory_item
      tags: [Inventory]
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Inventory item removed

  /payments:
    post:
      summary: Process payment
      operationId: process_payment
      tags: [Payments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'

  /payments/{paymentId}:
    get:
      summary: Get payment details
      operationId: get_payment
      tags: [Payments]
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

  /analytics/sales:
    get:
      summary: Get sales analytics
      operationId: get_sales_analytics
      tags: [Analytics]
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
            default: monthly
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Sales analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesAnalytics'

components:
  schemas:
    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0

    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        loyaltyPoints:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    CustomerCreate:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'

    CustomerUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]

    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [billing, shipping, both]
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        isDefault:
          type: boolean

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        orderNumber:
          type: string
          readOnly: true
        customerId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        subtotal:
          type: number
          format: float
          minimum: 0
        tax:
          type: number
          format: float
          minimum: 0
        shipping:
          type: number
          format: float
          minimum: 0
        total:
          type: number
          format: float
          minimum: 0
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        trackingNumber:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    OrderCreate:
      type: object
      required:
        - customerId
        - items
        - shippingAddress
      properties:
        customerId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
          minItems: 1
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        notes:
          type: string

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        inventoryItemId:
          type: string
          format: uuid
        productName:
          type: string
        productSku:
          type: string
        quantity:
          type: integer
          minimum: 1
        unitPrice:
          type: number
          format: float
          minimum: 0
        totalPrice:
          type: number
          format: float
          minimum: 0

    OrderItemCreate:
      type: object
      required:
        - inventoryItemId
        - quantity
      properties:
        inventoryItemId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1

    InventoryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sku:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        cost:
          type: number
          format: float
          minimum: 0
        quantity:
          type: integer
          minimum: 0
        lowStockThreshold:
          type: integer
          minimum: 0
        weight:
          type: number
          format: float
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        isActive:
          type: boolean
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    InventoryItemCreate:
      type: object
      required:
        - sku
        - name
        - price
        - quantity
      properties:
        sku:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        description:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        cost:
          type: number
          format: float
          minimum: 0
        quantity:
          type: integer
          minimum: 0
        lowStockThreshold:
          type: integer
          minimum: 0
          default: 10
        weight:
          type: number
          format: float
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        tags:
          type: array
          items:
            type: string

    InventoryItemUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        cost:
          type: number
          format: float
          minimum: 0
        quantity:
          type: integer
          minimum: 0
        lowStockThreshold:
          type: integer
          minimum: 0
        weight:
          type: number
          format: float
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        isActive:
          type: boolean
        tags:
          type: array
          items:
            type: string

    Dimensions:
      type: object
      properties:
        length:
          type: number
          format: float
          minimum: 0
        width:
          type: number
          format: float
          minimum: 0
        height:
          type: number
          format: float
          minimum: 0
        unit:
          type: string
          enum: [cm, in, mm]
          default: cm

    PaymentRequest:
      type: object
      required:
        - orderId
        - paymentMethod
        - amount
      properties:
        orderId:
          type: string
          format: uuid
        paymentMethod:
          type: string
          enum: [credit_card, debit_card, paypal, bank_transfer, apple_pay, google_pay]
        amount:
          type: number
          format: float
          minimum: 0.01
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          default: USD
        cardDetails:
          $ref: '#/components/schemas/CardDetails'
        billingAddress:
          $ref: '#/components/schemas/Address'

    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: string
          format: uuid
        status:
          type: string
          enum: [success, failed, pending, cancelled]
        transactionId:
          type: string
        message:
          type: string
        processedAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        paymentMethod:
          type: string
          enum: [credit_card, debit_card, paypal, bank_transfer, apple_pay, google_pay]
        amount:
          type: number
          format: float
        currency:
          type: string
        status:
          type: string
          enum: [success, failed, pending, cancelled, refunded]
        transactionId:
          type: string
        processedAt:
          type: string
          format: date-time
        refundedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    CardDetails:
      type: object
      required:
        - number
        - expiryMonth
        - expiryYear
        - cvv
      properties:
        number:
          type: string
          pattern: '^[0-9]{13,19}$'
        expiryMonth:
          type: integer
          minimum: 1
          maximum: 12
        expiryYear:
          type: integer
          minimum: 2024
        cvv:
          type: string
          pattern: '^[0-9]{3,4}$'
        holderName:
          type: string

    SalesAnalytics:
      type: object
      properties:
        period:
          type: string
          enum: [daily, weekly, monthly, yearly]
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        totalRevenue:
          type: number
          format: float
        totalOrders:
          type: integer
        averageOrderValue:
          type: number
          format: float
        topProducts:
          type: array
          items:
            $ref: '#/components/schemas/ProductSales'
        revenueByDay:
          type: array
          items:
            $ref: '#/components/schemas/DailyRevenue'

    ProductSales:
      type: object
      properties:
        inventoryItemId:
          type: string
          format: uuid
        productName:
          type: string
        quantitySold:
          type: integer
        totalRevenue:
          type: number
          format: float

    DailyRevenue:
      type: object
      properties:
        date:
          type: string
          format: date
        revenue:
          type: number
          format: float
        orderCount:
          type: integer
